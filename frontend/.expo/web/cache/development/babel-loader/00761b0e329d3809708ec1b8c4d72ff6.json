{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tyler\\\\OneDrive\\\\Documents\\\\pickup_app\\\\frontend\\\\component\\\\Map\\\\index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Constants from 'expo-constants';\nimport * as Location from 'expo-location';\nimport * as TaskManager from 'expo-task-manager';\nimport MapView, { Marker } from \"react-native-maps\";\nimport { LocationGeofencingEventType, LocationGeofencingRegionState } from 'expo-location';\nexport default function Map() {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      longitude = _useState4[0],\n      setLongitude = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      latitude = _useState6[0],\n      setLatitude = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMsg = _useState8[0],\n      setErrorMsg = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      courts = _useState10[0],\n      setCourts = _useState10[1];\n\n  var region = [{\n    identifier: 'SBHS',\n    latitude: 34.42961630772183,\n    longitude: -119.69758047820534,\n    radius: 200,\n    notifyOnEnter: true,\n    notifyOnExit: false,\n    state: Location.GeofencingRegionState.Outside\n  }];\n\n  var fetchCourts = function fetchCourts() {\n    var response, json;\n    return _regeneratorRuntime.async(function fetchCourts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://://192.168.1.13:19000/api/courts'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context.sent;\n            console.log(json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var LOCATION_TASK_NAME = 'background-location-task';\n  var GEO_LOC = 'GEO_LOC';\n  TaskManager.defineTask(LOCATION_TASK_NAME, function (_ref) {\n    var data = _ref.data,\n        error = _ref.error;\n\n    if (error) {\n      console.log(error);\n      return;\n    }\n\n    if (data) {\n      var locations = data.locations;\n      console.log(locations[0].coords);\n      setLatitude(locations[0].coords.latitude);\n      setLongitude(locations[0].coords.longitude);\n    }\n  });\n  var SBHS = [{\n    lat: 34.42961630772183,\n    long: -119.69758047820534\n  }, {\n    lat: latitude,\n    long: longitude\n  }];\n  TaskManager.defineTask(GEO_LOC, function (_ref2) {\n    var _ref2$data = _ref2.data,\n        eventType = _ref2$data.eventType,\n        region = _ref2$data.region,\n        error = _ref2.error;\n\n    if (error) {\n      return;\n    }\n\n    if (eventType === Location.GeofencingEventType.Enter) {\n      console.log(\"You've entered region:\", region);\n    } else if (eventType === Location.GeofencingEventType.Exit) {\n      console.log(\"You've left region:\", region);\n    }\n  });\n  useEffect(function () {\n    fetchCourts();\n  }, []);\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, fgGranted, _await$Location$reque2, bgGranted, value;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context2.sent;\n              fgGranted = _await$Location$reque.granted;\n\n              if (fgGranted) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", Alert.alert(\"Required\", \"Please grant GPS Location\"));\n\n            case 6:\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(Location.requestBackgroundPermissionsAsync());\n\n            case 8:\n              _await$Location$reque2 = _context2.sent;\n              bgGranted = _await$Location$reque2.granted;\n\n              if (bgGranted) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", Alert.alert(\"Location Access Required\", \"App requires location even when the App is backgrounded.\"));\n\n            case 12:\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(Location.hasStartedLocationUpdatesAsync(LOCATION_TASK_NAME));\n\n            case 14:\n              value = _context2.sent;\n\n              if (value) {\n                Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME);\n              }\n\n              _context2.next = 18;\n              return _regeneratorRuntime.awrap(Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n                accuracy: Location.Accuracy.BestForNavigation,\n                timeInterval: 10000,\n                foregroundService: {\n                  notificationTitle: \"App Name\",\n                  notificationBody: \"Location is used when App is in background\"\n                },\n                activityType: Location.ActivityType.AutomotiveNavigation,\n                showsBackgroundLocationIndicator: true\n              }));\n\n            case 18:\n              _context2.next = 20;\n              return _regeneratorRuntime.awrap(Location.startGeofencingAsync(GEO_LOC, region));\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, React.createElement(MapView, {\n    style: {\n      flex: 1\n    },\n    region: {\n      latitude: latitude,\n      longitude: longitude,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, SBHS.map(function (marker, index) {\n    return React.createElement(Marker, {\n      key: index,\n      coordinate: {\n        latitude: marker.lat,\n        longitude: marker.long\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    });\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Tyler/OneDrive/Documents/pickup_app/frontend/component/Map/index.js"],"names":["React","useState","useEffect","Constants","Location","TaskManager","MapView","Marker","LocationGeofencingEventType","LocationGeofencingRegionState","Map","location","setLocation","longitude","setLongitude","latitude","setLatitude","errorMsg","setErrorMsg","courts","setCourts","region","identifier","radius","notifyOnEnter","notifyOnExit","state","GeofencingRegionState","Outside","fetchCourts","fetch","response","json","console","log","LOCATION_TASK_NAME","GEO_LOC","defineTask","data","error","locations","coords","SBHS","lat","long","eventType","GeofencingEventType","Enter","Exit","requestForegroundPermissionsAsync","fgGranted","granted","Alert","alert","requestBackgroundPermissionsAsync","bgGranted","hasStartedLocationUpdatesAsync","value","stopLocationUpdatesAsync","startLocationUpdatesAsync","accuracy","Accuracy","BestForNavigation","timeInterval","foregroundService","notificationTitle","notificationBody","activityType","ActivityType","AutomotiveNavigation","showsBackgroundLocationIndicator","startGeofencingAsync","flex","latitudeDelta","longitudeDelta","map","marker","index","styles","StyleSheet","create","container","alignItems","justifyContent","padding","paragraph","fontSize","textAlign"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACC,OAAOC,OAAP,IAAiBC,MAAjB,QAA8B,mBAA9B;AACD,SAASC,2BAAT,EAAsCC,6BAAtC,QAA2E,eAA3E;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,kBAAgCT,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAkCX,QAAQ,CAAC,CAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAgCb,QAAQ,CAAC,CAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCf,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOgB,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA4BjB,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOkB,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,MAAM,GAAG,CAAC;AACdC,IAAAA,UAAU,EAAE,MADE;AAEdP,IAAAA,QAAQ,EAAE,iBAFI;AAGdF,IAAAA,SAAS,EAAE,CAAC,kBAHE;AAIdU,IAAAA,MAAM,EAAE,GAJM;AAKdC,IAAAA,aAAa,EAAE,IALD;AAMdC,IAAAA,YAAY,EAAE,KANA;AAOdC,IAAAA,KAAK,EAAEtB,QAAQ,CAACuB,qBAAT,CAA+BC;AAPxB,GAAD,CAAf;;AAWA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKC,KAAK,CAAC,yCAAD,CADV;;AAAA;AACZC,YAAAA,QADY;AAAA;AAAA,6CAECA,QAAQ,CAACC,IAAT,EAFD;;AAAA;AAEZA,YAAAA,IAFY;AAGlBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAMA,MAAMG,kBAAkB,GAAG,0BAA3B;AACA,MAAMC,OAAO,GAAG,SAAhB;AAEA/B,EAAAA,WAAW,CAACgC,UAAZ,CAAuBF,kBAAvB,EAA2C,gBAAqB;AAAA,QAAlBG,IAAkB,QAAlBA,IAAkB;AAAA,QAAZC,KAAY,QAAZA,KAAY;;AAC9D,QAAIA,KAAJ,EAAW;AACTN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA;AACD;;AACD,QAAID,IAAJ,EAAU;AACR,UAAQE,SAAR,GAAsBF,IAAtB,CAAQE,SAAR;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYM,SAAS,CAAC,CAAD,CAAT,CAAaC,MAAzB;AACAzB,MAAAA,WAAW,CAACwB,SAAS,CAAC,CAAD,CAAT,CAAaC,MAAb,CAAoB1B,QAArB,CAAX;AACAD,MAAAA,YAAY,CAAC0B,SAAS,CAAC,CAAD,CAAT,CAAaC,MAAb,CAAoB5B,SAArB,CAAZ;AACD;AACF,GAXD;AAYA,MAAM6B,IAAI,GAAG,CAAC;AACZC,IAAAA,GAAG,EAAE,iBADO;AAEZC,IAAAA,IAAI,EAAE,CAAC;AAFK,GAAD,EAGX;AACFD,IAAAA,GAAG,EAAC5B,QADF;AAEF6B,IAAAA,IAAI,EAAE/B;AAFJ,GAHW,CAAb;AAQAR,EAAAA,WAAW,CAACgC,UAAZ,CAAuBD,OAAvB,EAAgC,iBAA4C;AAAA,2BAAzCE,IAAyC;AAAA,QAAjCO,SAAiC,cAAjCA,SAAiC;AAAA,QAAtBxB,MAAsB,cAAtBA,MAAsB;AAAA,QAAZkB,KAAY,SAAZA,KAAY;;AAC1E,QAAIA,KAAJ,EAAW;AAET;AACD;;AACD,QAAIM,SAAS,KAAKzC,QAAQ,CAAC0C,mBAAT,CAA6BC,KAA/C,EAAsD;AACpDd,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCb,MAAtC;AACD,KAFD,MAEO,IAAIwB,SAAS,KAAKzC,QAAQ,CAAC0C,mBAAT,CAA6BE,IAA/C,EAAqD;AAC1Df,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCb,MAAnC;AACD;AACF,GAVD;AAWAnB,EAAAA,SAAS,CAAC,YAAK;AACb2B,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT;AAGA3B,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGOE,QAAQ,CAAC6C,iCAAT,EAHP;;AAAA;AAAA;AAEkBC,cAAAA,SAFlB,yBAESC,OAFT;;AAAA,kBAIID,SAJJ;AAAA;AAAA;AAAA;;AAAA,gDAKQE,KAAK,CAACC,KAAN,CAAY,UAAZ,EAAwB,2BAAxB,CALR;;AAAA;AAAA;AAAA,+CAQOjD,QAAQ,CAACkD,iCAAT,EARP;;AAAA;AAAA;AAOgBC,cAAAA,SAPhB,0BAOOJ,OAPP;;AAAA,kBAUII,SAVJ;AAAA;AAAA;AAAA;;AAAA,gDAWQH,KAAK,CAACC,KAAN,CACL,0BADK,EAEL,0DAFK,CAXR;;AAAA;AAAA;AAAA,+CAiBmBjD,QAAQ,CAACoD,8BAAT,CAAwCrB,kBAAxC,CAjBnB;;AAAA;AAiBKsB,cAAAA,KAjBL;;AAkBC,kBAAIA,KAAJ,EAAW;AACTrD,gBAAAA,QAAQ,CAACsD,wBAAT,CAAkCvB,kBAAlC;AACD;;AApBF;AAAA,+CAsBK/B,QAAQ,CAACuD,yBAAT,CAAmCxB,kBAAnC,EAAuD;AAC3DyB,gBAAAA,QAAQ,EAAExD,QAAQ,CAACyD,QAAT,CAAkBC,iBAD+B;AAE3DC,gBAAAA,YAAY,EAAE,KAF6C;AAG3DC,gBAAAA,iBAAiB,EAAE;AACjBC,kBAAAA,iBAAiB,EAAE,UADF;AAEjBC,kBAAAA,gBAAgB,EAAE;AAFD,iBAHwC;AAO3DC,gBAAAA,YAAY,EAAE/D,QAAQ,CAACgE,YAAT,CAAsBC,oBAPuB;AAQ3DC,gBAAAA,gCAAgC,EAAE;AARyB,eAAvD,CAtBL;;AAAA;AAAA;AAAA,+CAgCKlE,QAAQ,CAACmE,oBAAT,CAA8BnC,OAA9B,EAAsCf,MAAtC,CAhCL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAmCD,GApCQ,EAoCN,EApCM,CAAT;AAsCA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEmD,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAI,EAAE;AAAR,KADT;AAEE,IAAA,MAAM,EAAE;AACNzD,MAAAA,QAAQ,EAAEA,QADJ;AAENF,MAAAA,SAAS,EAAEA,SAFL;AAGN4D,MAAAA,aAAa,EAAE,MAHT;AAINC,MAAAA,cAAc,EAAE;AAJV,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKhC,IAAI,CAACiC,GAAL,CAAS,UAACC,MAAD,EAAQC,KAAR;AAAA,WACR,oBAAC,MAAD;AACA,MAAA,GAAG,EAAIA,KADP;AAEA,MAAA,UAAU,EAAG;AACX9D,QAAAA,QAAQ,EAAE6D,MAAM,CAACjC,GADN;AAEX9B,QAAAA,SAAS,EAAE+D,MAAM,CAAChC;AAFP,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ;AAAA,GAAT,CARL,CADF,CADJ;AAwBD;AAED,IAAMkC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTT,IAAAA,IAAI,EAAE,CADG;AAETU,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,OAAO,EAAE;AAJA,GADoB;AAO/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,SAAS,EAAE;AAFF;AAPoB,CAAlB,CAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Platform, Text, View, StyleSheet } from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport * as Location from 'expo-location';\r\nimport * as TaskManager from 'expo-task-manager';\r\n import MapView, {Marker} from \"react-native-maps\";\r\nimport { LocationGeofencingEventType, LocationGeofencingRegionState } from 'expo-location';\r\n\r\nexport default function Map() {\r\n  const [location, setLocation] = useState(null);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n  const [courts, setCourts] = useState(null)\r\n\r\n  const region = [{\r\n    identifier: 'SBHS',\r\n    latitude: 34.42961630772183,\r\n    longitude: -119.69758047820534,\r\n    radius: 200,\r\n    notifyOnEnter: true,\r\n    notifyOnExit: false,\r\n    state: Location.GeofencingRegionState.Outside\r\n    \r\n  }]\r\n\r\n  const fetchCourts = async() =>{\r\n    const response = await fetch('http://://192.168.1.13:19000/api/courts')\r\n    const json = await response.json()\r\n    console.log(json)\r\n  }\r\n\r\n  const LOCATION_TASK_NAME = 'background-location-task';\r\n  const GEO_LOC = 'GEO_LOC'\r\n\r\n  TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\r\n    if (error) {\r\n      console.log(error);\r\n      return;\r\n    }\r\n    if (data) {\r\n      const { locations } = data;\r\n      console.log(locations[0].coords)\r\n      setLatitude(locations[0].coords.latitude)\r\n      setLongitude(locations[0].coords.longitude)\r\n    }\r\n  });\r\n  const SBHS = [{\r\n    lat: 34.42961630772183,\r\n    long: -119.69758047820534\r\n  },{\r\n  lat:latitude,\r\n  long: longitude\r\n  }]\r\n\r\n  TaskManager.defineTask(GEO_LOC, ({ data: { eventType, region }, error }) => {\r\n    if (error) {\r\n      // check `error.message` for more details.\r\n      return;\r\n    }\r\n    if (eventType === Location.GeofencingEventType.Enter) {\r\n      console.log(\"You've entered region:\", region);\r\n    } else if (eventType === Location.GeofencingEventType.Exit) {\r\n      console.log(\"You've left region:\", region);\r\n    }\r\n  });\r\n  useEffect(() =>{\r\n    fetchCourts()\r\n  },[])\r\n  useEffect(() => {\r\n    (async () => {\r\n\r\n      const { granted: fgGranted } =\r\n      await Location.requestForegroundPermissionsAsync();\r\n    if (!fgGranted) {\r\n      return Alert.alert(\"Required\", \"Please grant GPS Location\");\r\n    }\r\n    const { granted: bgGranted } =\r\n      await Location.requestBackgroundPermissionsAsync();\r\n\r\n    if (!bgGranted) {\r\n      return Alert.alert(\r\n        \"Location Access Required\",\r\n        \"App requires location even when the App is backgrounded.\"\r\n      );\r\n    }\r\n\r\n    const value = await Location.hasStartedLocationUpdatesAsync(LOCATION_TASK_NAME)\r\n      if (value) {\r\n        Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME)\r\n      }\r\n    \r\n    await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\r\n      accuracy: Location.Accuracy.BestForNavigation,\r\n      timeInterval: 10000,\r\n      foregroundService: {\r\n        notificationTitle: \"App Name\",\r\n        notificationBody: \"Location is used when App is in background\",\r\n      },\r\n      activityType: Location.ActivityType.AutomotiveNavigation,\r\n      showsBackgroundLocationIndicator: true,\r\n    });\r\n    await Location.startGeofencingAsync(GEO_LOC,region)\r\n\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n      <View style={{ flex: 1 }}>\r\n        <MapView\r\n          style={{ flex: 1 }}\r\n          region={{\r\n            latitude: latitude,\r\n            longitude: longitude,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421\r\n          }}>\r\n            {SBHS.map((marker,index) =>(\r\n              <Marker\r\n              key = {index}\r\n              coordinate ={{\r\n                latitude: marker.lat,\r\n                longitude: marker.long\r\n              }}\r\n              >\r\n               \r\n            </Marker>\r\n            ))}\r\n          </MapView>\r\n      </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 20,\r\n  },\r\n  paragraph: {\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}